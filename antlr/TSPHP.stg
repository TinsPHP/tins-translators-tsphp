/*
 * This file is part of the TinsPHP project published under the Apache License 2.0
 * For the full copyright and license information, please have a look at LICENSE in the
 * root folder or visit the project's website http://tsphp.ch/wiki/display/TINS/License
 */

/*
 * This file is based on the file PHP54.stg from the TSPHP project.
 * TSPHP is also published under the Apache License 2.0
 * For more information see http://tsphp.ch/wiki/display/TSPHP/License
 */

group TSPHP;

file(namespaces) ::= <<
<namespaces; separator="\n">
>>

namespace(name, body) ::= <<
namespace<if(name)> <name><endif><body>
>>

body(statements) ::= <<
{<if(statements)>

    <statements; separator="\n">

<endif>}
>>

useDeclarationList(useDeclarations) ::= <<
use <useDeclarations; separator=", ">;
>>

useDeclaration(type, alias) ::= <<
<type> as <alias>
>>

const(type, identifiers) ::=<<
const <type> <identifiers; separator=", ">;
>>

assign(id,value) ::=<<
<id> = <value>
>>

method(modifier, returnType, identifier, params, body) ::=<<
<if(modifier)><modifier> <endif>function <returnType> <identifier>(<if(params)><params><endif>) {<if(body)>

    <body; separator="\n">

<else>


<endif>}
>>

modifier(modifiers) ::=<<
<modifiers; separator=" ">
>>

type(prefixModifiers, type, suffixModifiers) ::= <<
<if(prefixModifiers)><prefixModifiers> <endif><type><if(suffixModifiers)><suffixModifiers><endif>
>>

parameterList(declarations) ::= <<
<declarations; separator=", ">
>>

parameter(type, variableId, defaultValue) ::=<<
<type> <variableId><if(defaultValue)> = <defaultValue><endif>
>>

localVariableDeclarationList(type, variables) ::=<<
<type> <variables; separator=",">;
>>

expression(expression) ::= <<
<if(expression)><expression>;<endif>
>>

array(content) ::= <<
[<content; separator=", ">]
>>

keyValue(key, value) ::= <<
<key> => <value>
>>

operator(o) ::= "<o>"

unaryPreOperator(operator, expression) ::= <<
<operator><expression>
>>

unaryPostOperator(operator, expression) ::= <<
<expression><operator>
>>

binaryOperator(operator, left, right, needParentheses) ::= <<
<if(needParentheses)>(<endif><left> <operator> <right><if(needParentheses)>)<endif>
>>

ternaryOperator(cond, ifCase, elseCase, needParentheses) ::= <<
<if(needParentheses)>(<endif><cond> ? <ifCase> : <elseCase><if(needParentheses)>)<endif>
>>

instanceof(expression, type, needParentheses) ::= <<
<if(needParentheses)>(<endif><expression> instanceof <type><if(needParentheses)>)<endif>
>>

clone(expression) ::= <<
clone <expression>
>>

functionCall(identifier, parameters) ::= <<
<identifier>(<parameters; separator=", ">)
>>

arrayAccess(expression, identifier) ::= <<
<expression>[<index>]
>>

exit(expression) ::= <<
exit<if(expression)>(<expression>)<endif>
>>

if(condition, ifBlock, elseBlock) ::= <<
if (<condition>) {
    <ifBlock; separator="\n">
}<if(elseBlock)> else {
    <elseBlock; separator="\n">
}<endif>
>>

switch(condition, content) ::= <<
switch (<condition>) {
    <content; separator="\n">
}
>>

switchContent(labels, block) ::= <<
<labels; separator="\n">
    <block; separator="\n">
>>

caseLabel(label) ::= <<
case <label>:
>>

for(init, condition, update, block) ::= <<
for (<init> <condition> <update>) {
    <block; separator="\n">
}
>>

expressionList(expressions,semicolonAtTheEnd) ::= <<
<expressions; separator=", "><if(semicolonAtTheEnd)>;<endif>
>>

while(condition, block) ::= <<
while (<condition>) {
    <block; separator="\n">
}
>>

doWhile(block, condition) ::= <<
do {
    <block; separator="\n">
} while (<condition>);
>>

return(expression) ::= <<
return<if(expression)> <expression><endif>;
>>

throw(expression) ::= <<
throw <expression>;
>>

echo(expressions) ::= <<
echo <expressions; separator=", ">;
>>

break(index) ::= <<
break<if(index)> <index><endif>;
>>

continue(index) ::= <<
continue<if(index)> <index><endif>;
>>