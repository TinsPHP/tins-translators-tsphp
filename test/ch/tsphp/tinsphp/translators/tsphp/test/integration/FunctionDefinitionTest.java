/*
 * This file is part of the TinsPHP project published under the Apache License 2.0
 * For the full copyright and license information, please have a look at LICENSE in the
 * root folder or visit the project's website http://tsphp.ch/wiki/display/TINS/License
 */

/*
 * This file is based on the file UseTest from the translator component of the TSPHP project.
 * TSPHP is also published under the Apache License 2.0
 * For more information see http://tsphp.ch/wiki/display/TSPHP/License
 */

package ch.tsphp.tinsphp.translators.tsphp.test.integration;


import ch.tsphp.tinsphp.translators.tsphp.test.integration.testutils.ATranslatorTest;
import org.antlr.runtime.RecognitionException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class FunctionDefinitionTest extends ATranslatorTest
{

    public FunctionDefinitionTest(String testString, String expectedResult) {
        super(testString, expectedResult);
    }

    @Test
    public void test() throws RecognitionException, IOException {
        translate();
    }

    @Parameterized.Parameters
    public static Collection<Object[]> testStrings() {
        return Arrays.asList(new Object[][]{
                {
                        "<?php function fooA($x){return $x;} ?>",
                        "namespace{\n\n    function T fooA<T>(T $x) {\n        return $x;\n    }\n\n}"
                },
                {
                        "<?php function fooB($x, $y){return $x + $y;} ?>",
                        "namespace{\n"
                                + "\n"
                                + "    function array fooB0(array $x, array $y) {\n"
                                + "        return $x + $y;\n"
                                + "    }\n"
                                + "\n"
                                + "    function float fooB1(float $x, float $y) {\n"
                                + "        return $x + $y;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int fooB2(int $x, int $y) {\n"
                                + "        return $x + $y;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T fooB3<T>({as T} $x, {as T} $y) where [T <: (float | int)] {\n"
                                + "        return $x + $y;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooC($x, $y){return $x + $y + 1;} ?>",
                        "namespace{\n"
                                + "\n"
                                + "    function float fooC0(float $x, float $y) {\n"
                                + "        return $x + $y + 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int fooC1(int $x, int $y) {\n"
                                + "        return $x + $y + 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | T) fooC2<T>({as T} $x, {as T} $y) where [T <: (float | int)] {\n"
                                + "        return $x + $y + 1;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                //return but without expression
                // see TINS-404 return without expression and implicit null
                {
                        "<?php function fooD(){ return;} ?>",
                        "namespace{\n\n    function nullType fooD() {\n        return null;\n    }\n\n}"
                },
                {
                        "<?php function fooE($x){ if($x){ return; } return 1;} ?>",
                        "namespace{\n"
                                + "\n"
                                + "    function (int | nullType) fooE0((falseType | trueType) $x) {\n"
                                + "        if ($x) {\n"
                                + "            return null;\n"
                                + "        }\n"
                                + "        return 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | nullType) fooE1({as (falseType | trueType)} $x) {\n"
                                + "        if ($x) {\n"
                                + "            return null;\n"
                                + "        }\n"
                                + "        return 1;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooF($x){ if($x){ return; } else { return 1;}} ?>",
                        "namespace{\n"
                                + "\n"
                                + "    function (int | nullType) fooF0((falseType | trueType) $x) {\n"
                                + "        if ($x) {\n"
                                + "            return null;\n"
                                + "        } else {\n"
                                + "            return 1;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | nullType) fooF1({as (falseType | trueType)} $x) {\n"
                                + "        if ($x) {\n"
                                + "            return null;\n"
                                + "        } else {\n"
                                + "            return 1;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooG($x, $y){ $x = $y; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T1 fooG<T1, T2>(T1 $x, T2 $y) where [T2 <: T1] {\n"
                                + "        $x = $y;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooH($x, $y){ $a = $x + $y; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function array fooH0(array $x, array $y) {\n"
                                + "        array $a;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function float fooH1(float $x, float $y) {\n"
                                + "        float $a;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int fooH2(int $x, int $y) {\n"
                                + "        int $a;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T fooH3<T>({as T} $x, {as T} $y) where [T <: (float | int)] {\n"
                                + "        T $a;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooI($x){ return $x /= false;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T fooI<T>(T $x) "
                                + "where [(falseType | float | int) <: T <: {as (float | int)}] {\n"
                                + "        return $x /= false;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooJ($x, $y){ return $x /= $y;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | float) fooJ0((falseType | float) $x, float $y) {\n"
                                + "        return $x /= $y;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T fooJ1<T>(T $x, float $y) "
                                + "where [(falseType | float) <: T <: {as (float | int)}] {\n"
                                + "        return $x /= $y;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T fooJ2<T>(T $x, {as (float | int)} $y) "
                                + "where [(falseType | float | int) <: T <: {as (float | int)}] {\n"
                                + "        return $x /= $y;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                //TINS-479 local vars with multiple lower ref to params
                {
                        "<?php function fooK($x, $y){ $a = $x / $y; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | float) fooK0(float $x, float $y) {\n"
                                + "        (falseType | float) $a;\n"
                                + "        $a = $x / $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float) fooK1(float $x, {as (float | int)} $y) {\n"
                                + "        (falseType | float) $a;\n"
                                + "        $a = $x / $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float | int) fooK2(int $x, int $y) {\n"
                                + "        (falseType | float | int) $a;\n"
                                + "        $a = $x / $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float) fooK3({as (float | int)} $x, float $y) {\n"
                                + "        (falseType | float) $a;\n"
                                + "        $a = $x / $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float | int) fooK4("
                                + "{as (float | int)} $x, {as (float | int)} $y) {\n"
                                + "        (falseType | float | int) $a;\n"
                                + "        $a = $x / $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}" +
                                ""
                },
                //TINS-479 local vars with multiple lower ref to params
                {
                        "<?php function fooM($x, $y){ $a = 1; $a = $x + $y; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (array | int) fooM0(array $x, array $y) {\n"
                                + "        (array | int) $a;\n"
                                + "        $a = 1;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (float | int) fooM1(float $x, float $y) {\n"
                                + "        (float | int) $a;\n"
                                + "        $a = 1;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int fooM2(int $x, int $y) {\n"
                                + "        int $a;\n"
                                + "        $a = 1;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | T) fooM3<T>({as T} $x, {as T} $y) where [T <: (float | int)] {\n"
                                + "        (int | T) $a;\n"
                                + "        $a = 1;\n"
                                + "        $a = $x + $y;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },

                //see TINS-442 blank line around functions
                {
                        "<?php function foo(){return 1;} function bar(){return 2;}",
                        "namespace{"
                                + "\n"
                                + "\n    function int foo() {"
                                + "\n        return 1;"
                                + "\n    }"
                                + "\n"
                                + "\n    function int bar() {"
                                + "\n        return 2;"
                                + "\n    }"
                                + "\n"
                                + "\n}"
                },
                //see TINS-442 blank line around functions
                {
                        "<?php function foo(){return 1;} $a = 'hello'; "
                                + "function bar(){return 2;} function baz(){return 3;}",
                        "namespace{"
                                + "\n    string $a;"
                                + "\n"
                                + "\n    function int foo() {"
                                + "\n        return 1;"
                                + "\n    }"
                                + "\n"
                                + "\n    $a = 'hello';"
                                + "\n"
                                + "\n    function int bar() {"
                                + "\n        return 2;"
                                + "\n    }"
                                + "\n"
                                + "\n    function int baz() {"
                                + "\n        return 3;"
                                + "\n    }"
                                + "\n"
                                + "\n}"
                },
                //TINS-396 create local variable for parameters with type hints
                {
                        "<?php function typeHint(array \n$a){ return 1;}",
                        "namespace{"
                                + "\n"
                                + "\n    function int typeHint(array $a_0) {"
                                + "\n        mixed $a = $a_0;"
                                + "\n        return 1;"
                                + "\n    }"
                                + "\n"
                                + "\n}"
                },
                {
                        "<?php function typeHint(array \n$a, array \n$b){return $a + $b;}",
                        "namespace{"
                                + "\n"
                                + "\n    function array typeHint(array $a_0, array $b_0) {"
                                + "\n        array $b = $b_0;"
                                + "\n        array $a = $a_0;"
                                + "\n        return $a + $b;"
                                + "\n    }"
                                + "\n"
                                + "\n}"
                },
                {
                        "<?php function foo($x){if(true){return ~$x;} return $x + [1];}",
                        "namespace{\n"
                                + "\n"
                                + "    function (array | int | string) foo((array | {as (float | int)}) $x) {\n"
                                + "        if (true) {\n"
                                + "            return ~cast<(float | int | string)>($x);\n"
                                + "        }\n"
                                + "        return cast<array>($x) + [1];\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooN($x){echo $x; return $x && true; }",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | trueType) fooN0("
                                + "({as (falseType | trueType)} & {as string}) $x) {\n"
                                + "        echo $x;\n"
                                + "        return $x && true;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | trueType) fooN1(string $x) {\n"
                                + "        echo $x;\n"
                                + "        return $x && true;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooO($x){if(true){return $x;} return 1;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (int | T) fooO<T>(T $x) {\n"
                                + "        if (true) {\n"
                                + "            return $x;\n"
                                + "        }\n"
                                + "        return 1;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooP($x){if(true){return $x + 1;} return 'hello';} $a = fooP(2); $b = ~$a;",
                        "namespace{\n"
                                + "    (int | string) $b;\n"
                                //TODO TINS-666 soft typing erroneous for local/global variables
                                // should be (int | string)
                                + "    (float | int | string) $a;\n"
                                + "\n"
                                + "    function (int | string) fooP0(int $x) {\n"
                                + "        if (true) {\n"
                                + "            return $x + 1;\n"
                                + "        }\n"
                                + "        return 'hello';\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | string | T) fooP1<T>({as T} $x) "
                                + "where [int <: T <: (float | int)] {\n"
                                + "        if (true) {\n"
                                + "            return $x + 1;\n"
                                + "        }\n"
                                + "        return 'hello';\n"
                                + "    }\n"
                                + "\n"
                                + "    $a = fooP0(2);\n"
                                //TODO TINS-666 soft typing erroneous for local/global variables
                                // should be (int | string)
                                + "    $b = ~cast<(float | int | string)>($a);\n"
                                + "}" +
                                ""
                },
                {
                        "<?php function barQ($x){$x . 1; return $x;} "
                                + "function fooQ($x, $y){return 1; return $x + '1'; return barQ($y);}",
                        "namespace{\n"
                                + "\n"
                                + "    function T barQ<T>(T $x) where [T <: {as string}] {\n"
                                + "        $x . 1;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (float | int | T) fooQ<T>({as (float | int)} $x, T $y) "
                                + "where [T <: {as string}] {\n"
                                + "        return 1;\n"
                                + "        return $x + '1';\n"
                                + "        return barQ($y);\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooR($x, $y){ $x = 1 + $y; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T fooR0<T>(T $x, int $y) where [int <: T] {\n"
                                + "        $x = 1 + $y;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T1 fooR1<T1, T2>(T1 $x, {as T2} $y) "
                                + "where [(int | T2) <: T1, int <: T2 <: (float | int)] {\n"
                                + "        $x = 1 + $y;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooS($x){$a = $x; $a = 'hello'; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T fooS<T>(T $x) {\n"
                                + "        (string | T) $a;\n"
                                + "        $a = $x;\n"
                                + "        $a = 'hello';\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooU($x, $y, $z){$x = $y; $x = $z; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T1 fooU<T1, T2, T3>(T1 $x, T2 $y, T3 $z) where [(T2 | T3) <: T1] {\n"
                                + "        $x = $y;\n"
                                + "        $x = $z;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooU2($x, $y, $z, $a){$a = $x; $x = $y; $x = $z; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T4 fooU2<T1, T2, T3, T4>(T1 $x, T2 $y, T3 $z, T4 $a) "
                                + "where [(T2 | T3) <: T1, T1 <: T4] {\n"
                                + "        $a = $x;\n"
                                + "        $x = $y;\n"
                                + "        $x = $z;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooU3($x, $y, $z){$x = $y; $x = $z; $x = 1; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T1 fooU3<T1, T2, T3>(T1 $x, T2 $y, " +
                                "T3 $z) where [(int | T2 | T3) <: T1] {\n"
                                + "        $x = $y;\n"
                                + "        $x = $z;\n"
                                + "        $x = 1;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooU4($x, $y){$x = $y; $y = 1; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T1 fooU4<T1, T2>(T1 $x, T2 $y) where [(int | T2) <: T1, int <: T2] {\n"
                                + "        $x = $y;\n"
                                + "        $y = 1;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooU5($x, $y){$x = $y; $x = 1; $y = 'hello'; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T1 fooU5<T1, T2>(T1 $x, T2 $y) "
                                + "where [(int | string | T2) <: T1, string <: T2] {\n"
                                + "        $x = $y;\n"
                                + "        $x = 1;\n"
                                + "        $y = 'hello';\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooV($x, $y){$a = $x; $a = $y; $a = 1; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (int | T1 | T2) fooV<T1, T2>(T1 $x, T2 $y) {\n"
                                + "        (int | T1 | T2) $a;\n"
                                + "        $a = $x;\n"
                                + "        $a = $y;\n"
                                + "        $a = 1;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooV2($x, $y){$a = $x; ~$x; $a = $y; $a = 1; return $a;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (int | T1 | T2) fooV20<T1, T2>(T1 $x, T2 $y) where [T1 <: float] {\n"
                                + "        (int | T1 | T2) $a;\n"
                                + "        $a = $x;\n"
                                + "        ~$x;\n"
                                + "        $a = $y;\n"
                                + "        $a = 1;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | T1 | T2) fooV21<T1, T2>(T1 $x, T2 $y) where [T1 <: string] {\n"
                                + "        (int | T1 | T2) $a;\n"
                                + "        $a = $x;\n"
                                + "        ~$x;\n"
                                + "        $a = $y;\n"
                                + "        $a = 1;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | T) fooV22<T>(int $x, T $y) {\n"
                                + "        (int | T) $a;\n"
                                + "        $a = $x;\n"
                                + "        ~$x;\n"
                                + "        $a = $y;\n"
                                + "        $a = 1;\n"
                                + "        return $a;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fac($x){return $x > 0 ? $x * fac($x) : $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (T1 | T2) fac0<T1, T2>(T1 $x) "
                                + "where [T1 <: {as T2}, T2 <: (float | int)] {\n"
                                + "        return ($x > 0) ? $x * fac($x) : $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function float fac1(float $x) {\n"
                                + "        return ($x > 0) ? $x * fac($x) : $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int fac2(int $x) {\n"
                                + "        return ($x > 0) ? $x * fac($x) : $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function fooW($x, $y){$x . 1; $y & 1.2; return $x; return $y;}",
                        "namespace{\n"
                                + "\n"
                                + "    function (T1 | T2) fooW<T1, T2>(T1 $x, T2 $y) "
                                + "where [T1 <: {as string}, T2 <: (array | {as int})] {\n"
                                + "        $x . 1;\n"
                                + "        $y & 1.2;\n"
                                + "        return $x;\n"
                                + "        return $y;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function identity($x){return $x;}"
                                + "function identityWithBound($x){ echo $x; return $x;}",
                        "namespace{\n"
                                + "\n"
                                + "    function T identity<T>(T $x) {\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T identityWithBound0<T>(T $x) where [T <: string] {\n"
                                + "        echo $x;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "    function T identityWithBound1<T>(T $x) where [T <: {as string}] {\n"
                                + "        echo $x;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                //TODO TINS-661 reduce overloads if parameters are not ad-hoc polymorphic
                {
                        "<?php function countValue(array $arr, $value) {\n"
                                + "    $count = 0;\n"
                                + "    for ($i = 0; $i < count($arr); ++$i) {\n"
                                + "        if ($arr[$i] == $value) {\n"
                                + "            ++$count;\n"
                                + "        }\n"
                                + "    }\n"
                                + "    return $count;\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function (float | int | string) countValue0(array $arr_0, mixed $value) {\n"
                                + "        array $arr = $arr_0;\n"
                                + "        int $i;\n"
                                + "        (float | int | string) $count;\n"
                                + "        $count = 0;\n"
                                + "        for ($i = 0; $i < count($arr); ++$i) {\n"
                                + "            if ($arr[$i] == $value) {\n"
                                + "                ++$count;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $count;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (float | int) countValue1(array $arr_0, mixed $value) {\n"
                                + "        array $arr = $arr_0;\n"
                                + "        int $i;\n"
                                + "        (float | int) $count;\n"
                                + "        $count = 0;\n"
                                + "        for ($i = 0; $i < count($arr); ++$i) {\n"
                                + "            if ($arr[$i] == $value) {\n"
                                + "                ++$count;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $count;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (int | nullType) countValue2(array $arr_0, mixed $value) {\n"
                                + "        array $arr = $arr_0;\n"
                                + "        int $i;\n"
                                + "        (int | nullType) $count;\n"
                                + "        $count = 0;\n"
                                + "        for ($i = 0; $i < count($arr); ++$i) {\n"
                                + "            if ($arr[$i] == $value) {\n"
                                + "                ++$count;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $count;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int countValue3(array $arr_0, mixed $value) {\n"
                                + "        array $arr = $arr_0;\n"
                                + "        int $i;\n"
                                + "        int $count;\n"
                                + "        $count = 0;\n"
                                + "        for ($i = 0; $i < count($arr); ++$i) {\n"
                                + "            if ($arr[$i] == $value) {\n"
                                + "                ++$count;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $count;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function isEven($x) {\n   return $x % 2 == 0;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | trueType) isEven0((array | {as int}) $x) {\n"
                                + "        return $x % 2 == 0;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | trueType) isEven1(int $x) {\n"
                                + "        return $x % 2 == 0;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function isOdd($x) {\n   return $x % 2 == 1;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | trueType) isOdd0((array | {as int}) $x) {\n"
                                + "        return $x % 2 == 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | trueType) isOdd1(int $x) {\n"
                                + "        return $x % 2 == 1;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function someLogic($x, $y, $z){\n"
                                + "    $a = $x || $y && !$z;\n"
                                + "    $b = !$x or $y xor $z and $a;\n"
                                + "    return $a == $b;\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | trueType) someLogic0((falseType | trueType) $x, "
                                + "(falseType | trueType) $y, (falseType | trueType) $z) {\n"
                                + "        (falseType | trueType) $b;\n"
                                + "        (falseType | trueType) $a;\n"
                                + "        $a = $x || $y && !$z;\n"
                                + "        $b = !$x or $y xor $z and $a;\n"
                                + "        return $a == $b;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | trueType) someLogic1({as (falseType | trueType)} $x, "
                                + "{as (falseType | trueType)} $y, {as (falseType | trueType)} $z) {\n"
                                + "        (falseType | trueType) $b;\n"
                                + "        (falseType | trueType) $a;\n"
                                + "        $a = $x || $y && !$z;\n"
                                + "        $b = !$x or $y xor $z and $a;\n"
                                + "        return $a == $b;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function orExit($x){\n    $x or exit(-1);\n    return null;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function nullType orExit({as (falseType | trueType)} $x) {\n"
                                + "        $x or exit(-1);\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function andExit($x){\n    $x and exit(0);\n    return null;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function nullType andExit({as (falseType | trueType)} $x) {\n"
                                + "        $x and exit(0);\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                //TODO TINS-664 - as operator with convertible type in post condition
                {
                        "<?php /**\n"
                                + " * copied from\n"
                                + " * http://webdeveloperplus.com/php/21-really-useful-handy-php-code-snippets/\n"
                                + " */\n"
                                + "function readable_random_string($length){\n"
                                + "     $conso=array('b','c','d','f','g','h','j','k','l',\n"
                                + "     'm','n','p','r','s','t','v','w','x','y','z');\n"
                                + "     $vocal=array('a','e','i','o','u');\n"
                                + "     $password='';\n"
                                + "     srand((double)microtime()*1000000);\n"
                                + "     $max = $length/2;\n"
                                + "\n"
                                + "     for($i=1; $i <= $max; $i++){\n"
                                + "        $password .= $conso[rand(0,19)];\n"
                                + "        $password .= $vocal[rand(0,4)];\n"
                                + "     }\n"
                                + "\n"
                                + "     return $password;\n"
                                + " }",
                        //TODO TINS-666 soft typing erroneous for local/global variables
                        // e.g., the return type should eb string, $password as well
                        "namespace{\n"
                                + "\n"
                                + "    function {as string} readable_random_string({as (float | int)} $length) {\n"
                                + "        (float | int | nullType | string) $i;\n"
                                + "        (falseType | float | int) $max;\n"
                                + "        {as string} $password;\n"
                                + "        array $vocal;\n"
                                + "        array $conso;\n"
                                + "        $conso = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', "
                                + "'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n"
                                + "        $vocal = ['a', 'e', 'i', 'o', 'u'];\n"
                                + "        $password = '';\n"
                                + "        srand((float) microtime() * 1000000);\n"
                                + "        $max = $length / 2;\n"
                                + "        for ($i = 1; $i <= $max; $i++) {\n"
                                + "            $password .= cast<{as string}>($conso[rand(0, 19)]);\n"
                                + "            $password .= cast<{as string}>($vocal[rand(0, 4)]);\n"
                                + "        }\n"
                                + "        return $password;\n"
                                + "    }\n"
                                + "\n"
                                + "}" +
                                "",
                },
                //TODO TINS-664 - as operator with convertible type in post condition
                {
                        "<?php /**\n"
                                + " * adapted from\n"
                                + " * http://webdeveloperplus.com/php/21-really-useful-handy-php-code-snippets/\n"
                                + " */\n"
                                + "function generate_rand($l){\n"
                                + "  $c= ['A','B','C','D','E','F','G','H','I','J','K', 'L','M',\n"
                                + "    'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n"
                                + "    'a','b','c','d','e','f','g','h','i','j','k','l','m',\n"
                                + "    'n','o','p','q','r','s','t','u','v','w','x','y','z',\n"
                                + "    '0','1','2','3','4','5','6','7','8','9'];\n"
                                + "  srand((double)microtime()*1000000);\n"
                                + "  $rand = '';\n"
                                + "  for($i=0; $i<$l; $i++) {\n"
                                + "      $rand.= $c[rand(0,1)%count($c)];\n"
                                + "  }\n"
                                + "  return $rand;\n"
                                + "}",
                        //TODO TINS-666 soft typing erroneous for local/global variables
                        // e.g., the return type should eb string, $password as well
                        "namespace{\n"
                                + "\n"
                                + "    function {as string} generate_rand(mixed $l) {\n"
                                + "        (float | int | nullType | string) $i;\n"
                                + "        {as string} $rand;\n"
                                + "        array $c;\n"
                                + "        $c = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', "
                                + "'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', "
                                + "'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', "
                                + "'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', "
                                + "'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n"
                                + "        srand((float) microtime() * 1000000);\n"
                                + "        $rand = '';\n"
                                + "        for ($i = 0; $i < $l; $i++) {\n"
                                + "            $rand .= cast<{as string}>($c[rand(0, 1) % count($c)]);\n"
                                + "        }\n"
                                + "        return $rand;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function encode_email($email, $linkText, $attrs) {\n"
                                + "    $email = str_replace('@', '&#64;', $email);\n"
                                + "    $email = str_replace('.', '&#46;', $email);\n"
                                + "    $email = str_split($email, 5);\n"
                                + "\n"
                                + "    $linkText = str_replace('@', '&#64;', $linkText);\n"
                                + "    $linkText = str_replace('.', '&#46;', $linkText);\n"
                                + "    $linkText = str_split($linkText, 5);\n"
                                + "\n"
                                + "    $part1 = '<a href=\"ma';\n"
                                + "    $part2 = 'ilto&#58;';\n"
                                + "    $part3 = '\" '. $attrs .' >';\n"
                                + "    $part4 = '</a>';\n"
                                + "\n"
                                + "    $encoded = '<script type=\"text/javascript\">';\n"
                                + "    $encoded .= 'document.write(\\''.$part1.'\\');';\n"
                                + "    $encoded .= 'document.write(\\''.$part2.'\\');';\n"
                                + "\n"
                                + "    foreach(str_split($email, 1) as $e)\n"
                                + "    {\n"
                                + "        $encoded .= 'document.write(\\''.$e.'\\');';\n"
                                + "    }\n"
                                + "\n"
                                + "    $encoded .= 'document.write(\\''.$part3.'\\');';\n"
                                + "    foreach(str_split($linkText, 1) as $l)\n"
                                + "    {\n"
                                + "        $encoded .= 'document.write(\\''.$l.'\\');';\n"
                                + "    }\n"
                                + "\n"
                                + "    $encoded .= 'document.write(\\''.$part4.'\\');';\n"
                                + "    $encoded .= '</script>';\n"
                                + "\n"
                                + "    return $encoded;\n"
                                + "}",
                        //TODO TINS-666 soft typing erroneous for local/global variables
                        // e.g., the return type should be string, $password as well
                        "namespace{\n"
                                + "\n"
                                + "    function {as string} encode_email({as string} $email, {as string} $linkText, " +
                                "{as string} $attrs) {\n"
                                + "        mixed $l;\n"
                                + "        mixed $e;\n"
                                + "        {as string} $encoded;\n"
                                + "        {as string} $part4;\n"
                                + "        {as string} $part3;\n"
                                + "        {as string} $part2;\n"
                                + "        {as string} $part1;\n"
                                + "        $email = str_replace('@', '&#64;', cast<(array | string)>($email));\n"
                                + "        $email = str_replace('.', '&#46;', cast<(array | string)>($email));\n"
                                + "        $email = str_split($email, 5);\n"
                                + "        $linkText = str_replace('@', '&#64;', cast<(array | string)>($linkText));\n"
                                + "        $linkText = str_replace('.', '&#46;', cast<(array | string)>($linkText));\n"
                                + "        $linkText = str_split($linkText, 5);\n"
                                + "        $part1 = '<a href=\"ma';\n"
                                + "        $part2 = 'ilto&#58;';\n"
                                + "        $part3 = '\" ' . $attrs . ' >';\n"
                                + "        $part4 = '</a>';\n"
                                + "        $encoded = '<script type=\"text/javascript\">';\n"
                                + "        $encoded .= 'document.write(\\'' . $part1 . '\\');';\n"
                                + "        $encoded .= 'document.write(\\'' . $part2 . '\\');';\n"
                                + "        foreach (cast<array>(str_split($email, 1)) as mixed $e19_36) {\n"
                                + "            $e = $e19_36;\n"
                                + "            $encoded .= 'document.write(\\'' . cast<{as string}>($e) . '\\');';\n"
                                + "        }\n"
                                + "        $encoded .= 'document.write(\\'' . $part3 . '\\');';\n"
                                + "        foreach (cast<array>(str_split($linkText, 1)) as mixed $l25_39) {\n"
                                + "            $l = $l25_39;\n"
                                + "            $encoded .= 'document.write(\\'' . cast<{as string}>($l) . '\\');';\n"
                                + "        }\n"
                                + "        $encoded .= 'document.write(\\'' . $part4 . '\\');';\n"
                                + "        $encoded .= '</script>';\n"
                                + "        return $encoded;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function myTruncate($string, $limit, $break=\".\", $pad=\"...\") {\n"
                                + "    // return with no change if string is shorter than $limit\n"
                                + "    if(strlen($string) <= $limit)\n"
                                + "        return $string;\n"
                                + "\n"
                                + "    // is $break present between $limit and the end of the string?\n"
                                + "    if(false !== ($breakpoint = strpos($string, $break, $limit))) {\n"
                                + "        if($breakpoint < strlen($string) - 1) {\n"
                                + "            $string = substr($string, 0, $breakpoint) . $pad;\n"
                                + "        }\n"
                                + "    }\n"
                                + "    return $string;\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function string myTruncate(string $string, mixed $limit, string $break, " +
                                "{as string} $pad) {\n"
                                + "        (falseType | int) $breakpoint;\n"
                                + "        if (strlen($string) <= $limit) {\n"
                                + "            return $string;\n"
                                + "        }\n"
                                + "        if (false !== ($breakpoint = strpos($string, $break, $limit))) {\n"
                                + "            if ($breakpoint < strlen($string) - 1) {\n"
                                + "                $string = substr($string, 0, $breakpoint) . $pad;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $string;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function bitwise1($x, $y, $z){\n    return $x & $y | $z;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function int bitwise10((array | {as int}) $x, (array | {as int}) $y, " +
                                "(array | {as int}) $z) {\n"
                                + "        return $x & $y | $z;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int bitwise11(int $x, int $y, int $z) {\n"
                                + "        return $x & $y | $z;\n"
                                + "    }\n"
                                + "\n"
                                + "    function string bitwise12(string $x, string $y, string $z) {\n"
                                + "        return $x & $y | $z;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function bitwise2($x, $y, $z){\n    return $x << 2 & ($y >> 1) ^ $z;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function int bitwise20((array | {as int}) $x, (array | {as int}) $y, " +
                                "(array | {as int}) $z) {\n"
                                + "        return $x << 2 & $y >> 1 ^ $z;\n"
                                + "    }\n"
                                + "\n"
                                + "    function int bitwise21(int $x, int $y, int $z) {\n"
                                + "        return $x << 2 & $y >> 1 ^ $z;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                //TODO TINS-668 AmbiguousOverloadException
                {
                        "<?php function arithmetic1($x, $y, $z){\n    return ($x + $y) * $z / 2;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function (falseType | float) arithmetic10(float $x, float $y, float $z) {\n"
                                + "        return ($x + $y) * $z / 2;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float | int) arithmetic11(int $x, int $y, int $z) {\n"
                                + "        return ($x + $y) * $z / 2;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float) arithmetic12({as float} $x, {as float} $y, " +
                                "{as float} $z) {\n"
                                + "        return ($x + $y) * $z / 2;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function arithmetic2($x, $y, $z){\n    return abs(+($x / -$y) % $z);\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function int arithmetic20(float $x, float $y, (array | {as int}) $z) {\n"
                                + "        return abs(+($x / -$y) % $z);\n"
                                + "    }\n"
                                + "\n"
                                + "    function int arithmetic21(float $x, float $y, int $z) {\n"
                                + "        return abs(+($x / -$y) % $z);\n"
                                + "    }\n"
                                + "\n"
                                + "    function int arithmetic22(int $x, (falseType | float | int | nullType | string" +
                                " | trueType) $y, int $z) {\n"
                                + "        return abs(+($x / -$y) % $z);\n"
                                + "    }\n"
                                + "\n"
                                + "    function int arithmetic23({as (float | int)} $x, float $y, " +
                                "(array | {as int}) $z) {\n"
                                + "        return abs(+($x / -$y) % $z);\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function eo_php2xdate($phpformat){\n"
                                + "  $php2xdate = array(\n"
                                + "    'Y'=>'yyyy','y'=>'yy','L'=>''/*Not Supported*/,'o'=>'I',\n"
                                + "    'j'=>'d','d'=>'dd','D'=>'ddd','l'=>'dddd','N'=>'', /*NS*/ 'S'=>'S',\n"
                                + "    'w'=>'', /*NS*/ 'z'=>'',/*NS*/ 'W'=>'w',\n"
                                + "    'F'=>'MMMM','m'=>'MM','M'=>'MMM','n'=>'M','t'=>'',/*NS*/\n"
                                + "    'a'=>'tt','A'=>'TT',\n"
                                + "    'B'=>'',/*NS*/'g'=>'h','G'=>'H','h'=>'hh','H'=>'HH','u'=>'fff',\n"
                                + "    'i'=>'mm','s'=>'ss',\n"
                                + "    'O'=>'zz ', 'P'=>'zzz',\n"
                                + "    'c'=>'u'\n"
                                + "  );\n"
                                + "\n"
                                + "  $xdateformat=\"\";\n"
                                + "  for($i=0;  $i< strlen($phpformat); $i++){\n"
                                + "    //Handle backslash excape\n"
                                + "    if($phpformat[$i]==\"\\\\\"){\n"
                                + "      $xdateformat .= \"'\".$phpformat[$i+1].\"'\";\n"
                                + "      $i++;\n"
                                + "      continue;\n"
                                + "    }\n"
                                + "    if(isset($php2xdate[$phpformat[$i]])){\n"
                                + "      $xdateformat .= $php2xdate[$phpformat[$i]];\n"
                                + "    }else{\n"
                                + "      $xdateformat .= $phpformat[$i];\n"
                                + "    }\n"
                                + "  }\n"
                                + "  return $xdateformat;\n"
                                + "}",
                        //TODO TINS-666 soft typing erroneous for local/global variables
                        // e.g., the return type should be string, $password as well
                        "namespace{\n"
                                + "\n"
                                + "    function {as string} eo_php2xdate((array | string) $phpformat) {\n"
                                + "        (array | {as (float | int)}) $i;\n"
                                + "        {as string} $xdateformat;\n"
                                + "        array $php2xdate;\n"
                                + "        $php2xdate = ['Y' => 'yyyy', 'y' => 'yy', 'L' => '', 'o' => 'I', " +
                                "'j' => 'd', 'd' => 'dd', 'D' => 'ddd', 'l' => 'dddd', 'N' => '', 'S' => 'S', " +
                                "'w' => '', 'z' => '', 'W' => 'w', 'F' => 'MMMM', 'm' => 'MM', 'M' => 'MMM', " +
                                "'n' => 'M', 't' => '', 'a' => 'tt', 'A' => 'TT', 'B' => '', 'g' => 'h', 'G' => 'H', " +
                                "'h' => 'hh', 'H' => 'HH', 'u' => 'fff', 'i' => 'mm', 's' => 'ss', 'O' => 'zz ', " +
                                "'P' => 'zzz', 'c' => 'u'];\n"
                                + "        $xdateformat = \"\";\n"
                                + "        for ($i = 0; $i < strlen(cast<string>($phpformat)); $i++) {\n"
                                + "            if (cast<array>($phpformat)[cast<{as int}>($i)] == \"\\\\\") {\n"
                                + "                $xdateformat .= \"'\" . cast<{as string}>(cast<array>($phpformat)" +
                                "[cast<{as (float | int)}>($i) + 1]) . \"'\";\n"
                                + "                $i++;\n"
                                + "                continue;\n"
                                + "            }\n"
                                + "            if (isset($php2xdate[cast<{as int}>(cast<array>($phpformat)[cast<{as " +
                                "int}>($i)])])) {\n"
                                + "                $xdateformat .= cast<{as string}>($php2xdate[cast<{as int}>" +
                                "(cast<array>($phpformat)[cast<{as int}>($i)])]);\n"
                                + "            } else {\n"
                                + "                $xdateformat .= cast<{as string}>(cast<array>($phpformat)[cast<{as" +
                                " int}>($i)]);\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $xdateformat;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function array1($x, $y){\n    $x[0] = $y;\n    return $x;\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function T array1<T>(T $x, mixed $y) where [T <: array] {\n"
                                + "        $x[0] = $y;\n"
                                + "        return $x;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function array2(array $x, $y){\n    $x + $y;\n    return $x[3];\n}",
                        "namespace{\n"
                                + "\n"
                                + "    function mixed array2(array $x_0, array $y) {\n"
                                + "        array $x = $x_0;\n"
                                + "        $x + $y;\n"
                                + "        return $x[3];\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function _eventorganiser_remove_duplicates( $array=array() ){\n"
                                + "    //Do we need to worry about the times of the date-time objects?\n"
                                + "    if( empty($array) )\n"
                                + "        return $array;\n"
                                + "    $unique = array();\n"
                                + "    foreach ($array as $key=>$object){\n"
                                + "        if( !in_array($object, $unique) )\n"
                                + "            $unique[$key] = $object;\n"
                                + "        }\n"
                                + "        return $unique;\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function array _eventorganiser_remove_duplicates(array $array) {\n"
                                + "        (int | string) $key;\n"
                                + "        mixed $object;\n"
                                + "        array $unique;\n"
                                + "        if (empty($array)) {\n"
                                + "            return $array;\n"
                                + "        }\n"
                                + "        $unique = [];\n"
                                + "        foreach ($array as (int | string) $key6_23 => mixed $object6_29) {\n"
                                + "            $key = $key6_23;\n"
                                + "            $object = $object6_29;\n"
                                + "            if (!in_array($object, $unique)) {\n"
                                + "                $unique[$key] = $object;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $unique;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function _eventorganiser_compare_datetime( $date1, $date2 ){\n"
                                + "    \n"
                                + "    if ( $date1 == $date2 ) {\n"
                                + "        return 0;\n"
                                + "    } else if ( $date1 > $date2 ) {\n"
                                + "        return 1;\n"
                                + "    } else {\n"
                                + "        return -1;\n"
                                + "    }\n"
                                + "    \n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function int _eventorganiser_compare_datetime(mixed $date1, mixed $date2) {\n"
                                + "        if ($date1 == $date2) {\n"
                                + "            return 0;\n"
                                + "        } else {\n"
                                + "            if ($date1 > $date2) {\n"
                                + "                return 1;\n"
                                + "            } else {\n"
                                + "                return -1;\n"
                                + "            }\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "}",
                },
                {
                        "<?php function absint( $maybeint ) {\n"
                                + "    return abs( (int) $maybeint );\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function int absint(mixed $maybeint) {\n"
                                + "        return abs((int) $maybeint);\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function add_cssclass($add, $class) {\n"
                                + "    $class = empty($class) ? $add : $class .= ' ' . $add;\n"
                                + "    return $class;\n"
                                + "}\n",
                        "namespace{\n"
                                + "\n"
                                + "    function T2 add_cssclass0<T1, T2>(T1 $add, " +
                                "T2 $class) where [T1 <: {as string}, (string | T1) <: T2 <: {as string}] {\n"
                                + "        $class = (empty($class)) ? $add : $class .= ' ' . $add;\n"
                                + "        return $class;\n"
                                + "    }\n"
                                + "\n"
                                + "    function string add_cssclass1(string $add, string $class) {\n"
                                + "        $class = (empty($class)) ? $add : $class .= ' ' . $add;\n"
                                + "        return $class;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function is_admin(){return false;}\n"
                                + "function is_rtl(){return true;}\n"
                                + "function add_theme_support($x){ $x.'1'; return null;}\n"
                                + "\n"
                                + "function add_editor_style( array $stylesheet, array $editor_styles) {\n"
                                + "    add_theme_support( 'editor-style' );\n"
                                + "\n"
                                + "    if ( ! is_admin() )\n"
                                + "        return;\n"
                                + "\n"
                                + "    if ( is_rtl() ) {\n"
                                + "        $rtl_stylesheet = str_replace('.css', '-rtl.css', $stylesheet[0]);\n"
                                + "        $stylesheet[count($stylesheet)] = $rtl_stylesheet;\n"
                                + "    }\n"
                                + "\n"
                                + "    $editor_styles = array_merge( $editor_styles, $stylesheet );\n"
                                + "    return null;"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function falseType is_admin() {\n"
                                + "        return false;\n"
                                + "    }\n"
                                + "\n"
                                + "    function trueType is_rtl() {\n"
                                + "        return true;\n"
                                + "    }\n"
                                + "\n"
                                + "    function nullType add_theme_support0(string $x) {\n"
                                + "        $x . '1';\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    function nullType add_theme_support1({as string} $x) {\n"
                                + "        $x . '1';\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    function nullType add_editor_style(array $stylesheet_0, " +
                                "array $editor_styles_0) {\n"
                                + "        array $editor_styles = $editor_styles_0;\n"
                                + "        array $stylesheet = $stylesheet_0;\n"
                                + "        (array | string) $rtl_stylesheet;\n"
                                + "        add_theme_support0('editor-style');\n"
                                + "        if (!is_admin()) {\n"
                                + "            return null;\n"
                                + "        }\n"
                                + "        if (is_rtl()) {\n"
                                + "            $rtl_stylesheet = str_replace('.css', '-rtl.css', " +
                                "cast<(array | string)>($stylesheet[0]));\n"
                                + "            $stylesheet[count($stylesheet)] = $rtl_stylesheet;\n"
                                + "        }\n"
                                + "        $editor_styles = array_merge($editor_styles, $stylesheet);\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function mySprintf($format, $arg){\n"
                                + "   return $format.$arg;\n"
                                + "}\n"
                                + "\n"
                                + "function zeroise( $number, $threshold ) {\n"
                                + "    return mySprintf( '%0' . $threshold . 's', $number );\n"
                                + "}\n"
                                + "function antispambot( $email_address, $hex_encoding ) {\n"
                                + "    $email_no_spam_address = '';\n"
                                + "    for ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {\n"
                                + "        $j = rand( 0, 1 + $hex_encoding );\n"
                                + "        if ( $j == 0 ) {\n"
                                + "            $email_no_spam_address .= '&#' . ord( $email_address[$i] ) . ';';\n"
                                + "        } else if ( $j == 1 ) {\n"
                                + "            $email_no_spam_address .= $email_address[$i];\n"
                                + "        } else if ( $j == 2 ) {\n"
                                + "            $email_no_spam_address .= '%' . zeroise( dechex( ord( " +
                                "$email_address[$i] ) ), 2 );\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    return str_replace( '@', '&#64;', $email_no_spam_address );\n"
                                + "}"
                        ,
                        "namespace{\n"
                                + "\n"
                                + "    function string mySprintf0(string $format, string $arg) {\n"
                                + "        return $format . $arg;\n"
                                + "    }\n"
                                + "\n"
                                + "    function string mySprintf1({as string} $format, {as string} $arg) {\n"
                                + "        return $format . $arg;\n"
                                + "    }\n"
                                + "\n"
                                + "    function string zeroise0(string $number, string $threshold) {\n"
                                + "        return mySprintf0('%0' . $threshold . 's', $number);\n"
                                + "    }\n"
                                + "\n"
                                + "    function string zeroise1({as string} $number, {as string} $threshold) {\n"
                                + "        return mySprintf1('%0' . $threshold . 's', $number);\n"
                                + "    }\n"
                                + "\n"
                                + "    function (array | string) antispambot((array | string) $email_address, " +
                                "(array | {as (float | int)}) $hex_encoding) {\n"
                                + "        int $j;\n"
                                + "        (int | nullType) $len;\n"
                                + "        {as int} $i;\n"
                                + "        {as string} $email_no_spam_address;\n"
                                + "        $email_no_spam_address = '';\n"
                                + "        for ($i = 0, $len = strlen(cast<string>($email_address)); $i < $len; $i++)" +
                                " {\n"
                                + "            $j = rand(0, 1 + cast<{as (float | int)}>($hex_encoding));\n"
                                + "            if ($j == 0) {\n"
                                + "                $email_no_spam_address .= '&#' . ord(cast<{as string}>(cast<array>" +
                                "($email_address)[$i])) . ';';\n"
                                + "            } else {\n"
                                + "                if ($j == 1) {\n"
                                + "                    $email_no_spam_address .= cast<{as string}>(cast<array>" +
                                "($email_address)[$i]);\n"
                                + "                } else {\n"
                                + "                    if ($j == 2) {\n"
                                + "                        $email_no_spam_address .= '%' . zeroise1(dechex(ord" +
                                "(cast<{as string}>(cast<array>($email_address)[$i]))), 2);\n"
                                + "                    }\n"
                                + "                }\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return str_replace('@', '&#64;', " +
                                "cast<(array | string)>($email_no_spam_address));\n"
                                + "    }\n"
                                + "\n"
                                + "}"
                },
                {
                        "<?php function myHtmlEntities($string){\n"
                                + "    return $string.'1';\n"
                                + "}\n"
                                + "function allowed_tags($allowedtags) {\n"
                                + "    $allowed = '';\n"
                                + "    foreach ( (array) $allowedtags as $tag => $attributes ) {\n"
                                + "        $allowed .= '<'.$tag;\n"
                                + "        if ( 0 < count($attributes) ) {\n"
                                + "            foreach ( $attributes as $attribute => $limits ) {\n"
                                + "                $allowed .= ' '.$attribute.'=\"\"';\n"
                                + "            }\n"
                                + "        }\n"
                                + "        $allowed .= '> ';\n"
                                + "    }\n"
                                + "    return myHtmlEntities( $allowed );\n"
                                + "}",
                        "namespace{\n"
                                + "\n"
                                + "    function string myHtmlEntities0(string $string) {\n"
                                + "        return $string . '1';\n"
                                + "    }\n"
                                + "\n"
                                + "    function string myHtmlEntities1({as string} $string) {\n"
                                + "        return $string . '1';\n"
                                + "    }\n"
                                + "\n"
                                + "    function string allowed_tags(mixed $allowedtags) {\n"
                                + "        {as string} $attribute;\n"
                                + "        mixed $limits;\n"
                                + "        {as string} $tag;\n"
                                + "        mixed $attributes;\n"
                                + "        {as string} $allowed;\n"
                                + "        $allowed = '';\n"
                                + "        foreach ((array) $allowedtags as (int | string) $tag6_38 => mixed " +
                                "$attributes6_46) {\n"
                                + "            $tag = $tag6_38;\n"
                                + "            $attributes = $attributes6_46;\n"
                                + "            $allowed .= '<' . $tag;\n"
                                + "            if (0 < count($attributes)) {\n"
                                + "                foreach (cast<array>($attributes) as  ) {\n"
                                + "                    $attribute = ;\n"
                                + "                    $limits = ;\n"
                                + "                    $allowed .= ' ' . $attribute . '=\"\"';\n"
                                + "                }\n"
                                + "            }\n"
                                + "            $allowed .= '> ';\n"
                                + "        }\n"
                                + "        return myHtmlEntities($allowed);\n"
                                + "    }\n"
                                + "\n"
                                + "}" +
                                ""
                },
                {
                        "<?php function myCount(array $x) {\n"
                                + "    return 1;\n"
                                + "}\n"
                                + "function myLog($arg){\n"
                                + "    floor($arg);\n"
                                + "    return 1.2;\n"
                                + "    return null;\n"
                                + "}\n"
                                + "function myCeil($value){\n"
                                + "    return floor($value);\n"
                                + "}\n"
                                + "function myArrayReverse(array $array){\n"
                                + "    return [1];\n"
                                + "}\n"
                                + "function shellsort(array $arr)\n"
                                + "{\n"
                                + "    $n = myCount($arr);\n"
                                + "    $t = myCeil(myLog($n, 2));\n"
                                + "    $d = [0, 1];\n"
                                + "    for ($i = 2; $i <= $t; $i++) {\n"
                                + "        $d[$i] = 2 * $d[$i - 1] + 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    $d = myArrayReverse($d);\n"
                                + "    foreach ($d as $curIncrement) {\n"
                                + "        for ($i = $curIncrement; $i < $n; $i++) {\n"
                                + "            $x = $arr[$i];\n"
                                + "            $j = $i - $curIncrement;\n"
                                + "            while ($j >= 0 && $x < $arr[$j]) {\n"
                                + "                $arr[$j + $curIncrement] = $arr[$j];\n"
                                + "                $j = $j - $curIncrement;\n"
                                + "            }\n"
                                + "            $arr[$j + $curIncrement] = $x;\n"
                                + "        }\n"
                                + "    }\n"
                                + "    return $arr;\n"
                                + "}\n",
                        "namespace{\n"
                                + "\n"
                                + "    function int myCount(array $x_0) {\n"
                                + "        mixed $x = $x_0;\n"
                                + "        return 1;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (float | nullType) myLog0((array | {as float}) $arg) {\n"
                                + "        floor($arg);\n"
                                + "        return 1.2;\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (float | nullType) myLog1(float $arg) {\n"
                                + "        floor($arg);\n"
                                + "        return 1.2;\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    function (falseType | float) myCeil0((array | {as float}) $value) {\n"
                                + "        return floor($value);\n"
                                + "    }\n"
                                + "\n"
                                + "    function float myCeil1(float $value) {\n"
                                + "        return floor($value);\n"
                                + "    }\n"
                                + "\n"
                                + "    function array myArrayReverse(array $array_0) {\n"
                                + "        mixed $array = $array_0;\n"
                                + "        return [1];\n"
                                + "    }\n"
                                + "\n"
                                + "    function array shellsort(array $arr_0) {\n"
                                + "        array $arr = $arr_0;\n"
                                + "        (array | {as (float | int)}) $j;\n"
                                + "        mixed $x;\n"
                                + "        mixed $curIncrement;\n"
                                + "        mixed $i;\n"
                                + "        array $d;\n"
                                + "        (falseType | float) $t;\n"
                                + "        (array | {as float}) $n;\n"
                                + "        $n = myCount($arr);\n"
                                + "        $t = myCeil(myLog1(cast<float>($n), 2));\n"
                                + "        $d = [0, 1];\n"
                                + "        for ($i = 2; $i <= $t; $i++) {\n"
                                + "            $d[cast<{as int}>($i)] = 2 * "
                                + "cast<{as (float | int)}>($d[cast<{as (float | int)}>($i) - 1]) + 1;\n"
                                + "        }\n"
                                + "        $d = myArrayReverse($d);\n"
                                + "        foreach ($d as mixed $curIncrement25_19) {\n"
                                + "            $curIncrement = $curIncrement25_19;\n"
                                + "            for ($i = $curIncrement; $i < $n; $i++) {\n"
                                + "                $x = $arr[cast<{as int}>($i)];\n"
                                + "                $j = cast<{as (float | int)}>($i) - "
                                + "cast<{as (float | int)}>($curIncrement);\n"
                                + "                while ($j >= 0 && $x < $arr[cast<{as int}>($j)]) {\n"
                                + "                    $arr[cast<(float | int)>("
                                + "cast<(array | {as (float | int)})>($j) + "
                                + "cast<(array | {as (float | int)})>($curIncrement))] = $arr[cast<{as int}>($j)];\n"
                                + "                    $j = cast<{as (float | int)}>($j) - "
                                + "cast<{as (float | int)}>($curIncrement);\n"
                                + "                }\n"
                                + "                $arr[cast<(float | int)>(cast<(array | {as (float | int)})>($j) + "
                                + "cast<(array | {as (float | int)})>($curIncrement))] = $x;\n"
                                + "            }\n"
                                + "        }\n"
                                + "        return $arr;\n"
                                + "    }\n"
                                + "\n"
                                + "}" +
                                ""
                }
        });
    }
}
